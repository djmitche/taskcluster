import { hot } from 'react-hot-loader';
import React, { Fragment, Component } from 'react';
import { graphql, withApollo } from 'react-apollo';
import { scopeIntersection } from 'taskcluster-lib-scopes';
import { parse } from 'qs';
import { withStyles } from '@material-ui/core/styles';
import Spinner from '@mozilla-frontend-infra/components/Spinner';
import ErrorPanel from '../../components/ErrorPanel';
import Homepage from '../../components/Homepage';
import AuthConsent from '../../components/AuthConsent';
import Button from '../../components/Button';
import Dashboard from '../../components/Dashboard';
import ClientForm from '../../components/ClientForm';
import { withAuth } from '../../utils/Auth';
import fromNow from '../../utils/fromNow';
import loginQuery from './login.graphql';
import resetAccessTokenQuery from '../Clients/ViewClient/resetAccessToken.graphql';
import createClientQuery from '../Clients/ViewClient/createClient.graphql';

const isClientNotFound = error => error.message.includes('Client not found');

@hot(module)
@withAuth
@withApollo
@graphql(loginQuery, {
  skip: ({ user }) => !user,
  options: ({ user, location: { search } }) => ({
    errorPolicy: 'all',
    fetchPolicy: 'network-only',
    variables: {
      clientId: `${user.credentials.clientId}/${decodeURIComponent(
        parse(search.slice(1)).client_id
      )}`,
    },
  }),
})
@withStyles(theme => ({
  buttonLeft: {
    marginRight: theme.spacing.unit,
  },
  choicesDiv: {
    textAlign: 'center',
  },
}))
export default class ThirdPartyLogin extends Component {
  query = this.props.location.search.slice(1);

  parsedQuery = parse(this.query);

  state = {
    error: null,
    displayConsentForm: false,
    displayClientCreatorForm: false,
    transactionID: this.parsedQuery.transactionID,
    clientId: null,
    formData: {},
    loading: false,
  };

  static getDerivedStateFromProps(props, state) {
    const newState = {};
    const {
      data,
      user,
      location: { search },
    } = props;
    const qs = search.slice(1);
    const query = parse(qs);
    const scopes = query.scope.split(' ');
    const registeredClientId = decodeURIComponent(query.client_id);

    if (!user || !data || !(data.currentScopes instanceof Array)) {
      return null;
    }

    if (!state.clientId) {
      const { clientId } = user.credentials;

      Object.assign(newState, {
        clientId: `${clientId}/${decodeURIComponent(registeredClientId)}`,
        formData: {
          ...state.formData,
          scopes: scopeIntersection(scopes, data.currentScopes),
          expires: fromNow(query.expires),
          description: `Client generated by ${clientId} for OAuth2 Client ${registeredClientId}`,
        },
      });
    }

    if (data.error) {
      if (isClientNotFound(data.error)) {
        Object.assign(newState, {
          displayClientCreatorForm: true,
          displayConsentForm: false,
        });
      } else {
        Object.assign(newState, {
          displayConsentForm: true,
          displayClientCreatorForm: false,
        });
      }
    }

    return newState;
  }

  handleExpirationChange = expires => {
    this.setState({
      formData: {
        ...this.state.formData,
        expires,
      },
    });
  };

  handleInputChange = ({ target: { name, value } }) => {
    this.setState({
      formData: {
        ...this.state.formData,
        [name]: value,
      },
    });
  };

  handleScopesChange = scopes => {
    this.setState({
      formData: {
        ...this.state.formData,
        scopes,
      },
    });
  };

  findNextAvailableClientId = async (clientId, suffix) => {
    const newClientId = `${clientId}-${suffix}`;

    try {
      await this.props.client.query({
        query: loginQuery,
        variables: {
          clientId: newClientId,
        },
      });

      return this.findNextAvailableClientId(clientId, suffix + 1);
    } catch (error) {
      if (isClientNotFound(error)) {
        return newClientId;
      }

      throw error;
    }
  };

  handleCreateNewClientClick = async () => {
    const { expires, description, scopes } = this.state.formData;
    const { deleteOnExpiration } = this.props.data.client;

    try {
      this.setState({ loading: true });

      const clientId = await this.findNextAvailableClientId(
        `${this.props.user.credentials.clientId}/${decodeURIComponent(
          this.parsedQuery.client_id
        )}`,
        0
      );

      await this.handleClientCreate(
        {
          expires,
          description,
          scopes,
          deleteOnExpiration,
        },
        clientId
      );

      this.setState({ clientId, error: null, loading: false });
    } catch (error) {
      this.setState({ error, loading: false });
    }
  };

  handleResetAccessToken = async () => {
    try {
      this.setState({ loading: true });

      await this.props.client.mutate({
        mutation: resetAccessTokenQuery,
        variables: {
          clientId: this.state.clientId,
        },
      });

      this.setState({
        loading: false,
        error: null,
        displayConsentForm: true,
        clientId: this.state.clientId,
      });
    } catch (error) {
      this.setState({ error, loading: false });
    }
  };

  handleClientCreate = async (client, clientId) => {
    this.setState({ loading: true });

    try {
      await this.props.client.mutate({
        mutation: createClientQuery,
        variables: {
          clientId,
          client,
        },
      });

      this.setState({
        error: null,
        loading: false,
        displayConsentForm: true,
        displayClientCreatorForm: false,
      });
    } catch (error) {
      this.setState({
        error,
        loading: false,
      });
    }
  };

  render() {
    const { classes, user, data } = this.props;
    const {
      loading,
      displayConsentForm,
      displayClientCreatorForm,
      error,
      transactionID,
      clientId,
      formData,
    } = this.state;
    const registeredClientId = decodeURIComponent(this.parsedQuery.client_id);
    const initialThirdPartyClient = {
      clientId,
      scopes: formData.scopes ? formData.scopes : [],
      description: formData.description,
      expires: formData.expires,
    };

    return (
      <Dashboard title="Third Party Login">
        {loading ? (
          <Spinner loading />
        ) : (
          <Fragment>
            {error && <ErrorPanel error={error} />}
            {!user && !displayConsentForm && <Homepage />}
            {!displayConsentForm && data && data.client && (
              <Fragment>
                <ErrorPanel
                  error={`\`${clientId}\` already exists. You can re-use it by resetting the access token, but that will cause any other uses of that clientId (with the old access token) to stop working.`}
                  warning
                />
                <div className={classes.choicesDiv}>
                  <Button
                    className={classes.buttonLeft}
                    variant="outlined"
                    onClick={this.handleCreateNewClientClick}>
                    Create A New Client ID
                  </Button>
                  <Button
                    color="secondary"
                    variant="contained"
                    onClick={this.handleResetAccessToken}>
                    Reset Access Token
                  </Button>
                </div>
              </Fragment>
            )}
          </Fragment>
        )}
        {displayConsentForm &&
          user &&
          Boolean(Object.keys(formData).length) && (
            <AuthConsent
              transactionID={transactionID}
              registeredClientId={registeredClientId}
              clientId={clientId}
              user={formData.user}
              onExpirationChange={this.handleExpirationChange}
              onInputChange={this.handleInputChange}
              onScopesChange={this.handleScopesChange}
              formData={formData}
            />
          )}
        {displayClientCreatorForm && (
          <ClientForm
            isNewClient
            onSaveClient={this.handleClientCreate}
            initialThirdPartyClient={initialThirdPartyClient}
          />
        )}
      </Dashboard>
    );
  }
}
